#!/bin/env bash

setup_prefix() {
    mkdir -p $1/bin
    mkdir -p $1/lib
    [ "${SETUP_COMPILER}" != "" ] && cp ${SETUP_COMPILER} $1/bin/
    find $1 -type d -exec fs sa {} system:anyuser rl \;
}

download_files() {
    if [ ! -f $PYTHON_VERSION.tar.bz2 ] 
    then
        wget http://www.python.org/ftp/python/${PYVER}/$PYTHON_VERSION.tar.bz2
    fi

    if [ ! -e scipy-${SCIPY_VER}.tar.gz ]
    then 
        wget \
         http://sourceforge.net/projects/scipy/files/scipy/${SCIPY_VER}/scipy-${SCIPY_VER}.tar.gz/download \
         -o scipy-${SCIPY_VER}.tar.gz
    fi

    if [ ! -f get-pip.py ]
    then
        wget https://raw.github.com/pypa/pip/master/contrib/get-pip.py
    fi
}


install_python() {
    if [ ! -d $PYTHON_VERSION ]
    then
        echo "Extracting tarball..."
        tar xvfj $PYTHON_VERSION.tar.bz2 > /dev/null
        echo "Done"
    fi

    # building python itself..
    cd $PYTHON_VERSION
    ./configure \
      --enable-shared \
      --with-threads \
      --with-system-expat \
      --with-system-ffi \
      --prefix=$PREFIX
    make -j3 || return $?
    make install || return $?
    
    cd ..
    
    # setting environment...
    cp -f activate_base activate
    echo -e "export PATH=$PREFIX/bin/:\$PATH\n" >> activate
    echo -e "export LD_LIBRARY_PATH=$PREFIX/lib/:\$LD_LIBRARY_PATH\n" >> activate
    [ "${SETUP_COMPILER}" != "" ] && echo -e ". ${PREFIX}/bin/${SETUP_COMPILER} ${SETUP_ARGS}" >> activate
    mv activate ${PREFIX}/bin/
}

pip_installs() {
    pip install --upgrade numpy      || return $?
    pip install --upgrade matplotlib || return $?
    pip install --upgrade scipy      || return $?
    pip install --upgrade ipython    || return $?
    pip install --upgrade cython     || return $?
    pip install --upgrade sympy      || return $?
    pip install --upgrade pyyaml     || return $?
    pip install --upgrade pexpect    || return $?
    pip install --upgrade deap       || return $?
    pip install --upgrade h5py       || return $?
    pip install --upgrade PyYAML     || return $?
}

install_madx() {
    start=`pwd`
    [ ! -d "madX" ] && svn checkout http://svnweb.cern.ch/guest/madx/trunk/madX/
    cd madX
    svn update
    [ -d "build" ] && rm -rf build
    mkdir build;cd build
    /usr/bin/cmake28 \
        -DMADX_STATIC=OFF \
        -DBUILD_SHARED_LIBS=ON \
        -DCMAKE_INSTALL_PREFIX=${PREFIX} \
        -DCMAKE_BUILD_TYPE=RelWithDebInfo \
        ../
    make install || return $?
    cd $start
}

install_pymad() {
    start=`pwd`
    install_madx || return $?
    if [ ! -d "pymad" ] 
    then
        git clone git://github.com/pymad/pymad.git || return 1
    fi
    cd pymad
    git pull
    python setup.py install
    cd $start
}

install_placet_htgen() {
    start=`pwd`

    [ ! -d "placet" ] && svn co http://svnweb.cern.ch/guest/clicsw/trunk/placet
    cd placet
    svn update || return $?
    cd $start
    [ -d placet-build ] && rm -rf placet-build
    svn export placet placet-build
    cd placet-build

    # first we configure placet (HTGEN needs some headers)
    ./configure \
        --enable-octave \
        --enable-python \
        --with-python=python${PYVER_MAJOR} \
        --prefix=$PREFIX || return $?

    # now we build HTGEN
    cd $start
    [ ! -d "HTGEN" ] && svn co http://svnweb.cern.ch/guest/clicsw/trunk/HTGEN/
    cd HTGEN
    svn update || return $?
    [ -d build ] && rm -rf build
    mkdir build
    cd build
    PLACET_DIR=$start/placet-build /usr/bin/cmake28 -DCMAKE_INSTALL_PREFIX=$PREFIX .. || exit $?
    make install || exit $?

    # then we build placet including htgen interface
    cd $start/placet-build
    LDFLAGS='-static-libstdc++ -static-libgcc' HTGEN_DIR=${PREFIX} ./configure \
        --enable-htgen \
        --enable-octave \
        --enable-python \
        --with-pydir=${PREFIX} \
        --prefix=$PREFIX || return $?
    make install || return 1
    cd $start
}

install_fftw3() {
    start=`pwd`
    [ ! -f fftw-${FFTW_VER}.tar.gz ] && wget http://www.fftw.org/fftw-${FFTW_VER}.tar.gz
    tar xzf fftw-${FFTW_VER}.tar.gz 
    cd fftw-${FFTW_VER}/
    ./configure \
       --enable-avx \
       --enable-openmp \
       --prefix=${PREFIX}
    make -j${NPROCS}
    make install
    cd ${start}
}

install_guineapig() {
    start=`pwd`
    [ ! -d guinea-pig ] && svn co http://svnweb.cern.ch/guest/clicsw/trunk/guinea-pig
    cd guinea-pig/
    svn up
    [ -d build ] && rm -rf build
    mkdir build
    cd build
    FFTWDIR=${PREFIX} /usr/bin/cmake28 -DCMAKE_INSTALL_PREFIX=${PREFIX} ..
    make -j${NPROCS}
    make install
    cd ${start}
}

install_pyevolve() {
  PYEVOLVE_VER=0.6rc1
  [ ! -f Pyevolve-${PYEVOLVE_VER}.tar.gz ] && wget http://ufpr.dl.sourceforge.net/project/pyevolve/Pyevolve/${PYEVOLVE_VER}/Pyevolve-${PYEVOLVE_VER}.tar.gz
  tar -xzf Pyevolve-${PYEVOLVE_VER}.tar.gz 
  cd Pyevolve-${PYEVOLVE_VER}/
  python setup.py build
  python setup.py install
}
